function adjustPowerInComp(obj)
    % Make adjustments to power generation and consumption within each
    % connected component.

    % Tolerance for slack generation limit
    tol = 0.1;  % If the slack generator exceeds its capacity by more than this,
                % we will adjust the demand.

    % Matpower case data indices
    BUS_I = 1; GEN_STATUS = 8; PMAX = 9; PG = 2; PD = 3; GEN_BUS = 1;

    % Copy bus and generator data to local variables
    bus = obj.rmpc.bus;
    gen = obj.rmpc.gen;

    % For each active component in the network:
    active_components = [obj.Component(:).Status];  % Logical array of active components
    for i = find(active_components)  % Iterate over active components
        in = obj.Component(i).in;
        slackgen = obj.Component(i).slackgen;
        slackPG = gen(slackgen, PG);  % Power generated by slack generator

        if slackPG > 0
            % If the slack generator is over-generating (more than its max capacity),
            % we need to reduce the demand uniformly across all buses in the component.
            shed = slackPG - gen(slackgen, PMAX);
            if shed > tol  % Only adjust if the slack generator exceeds the tolerance
                % GS = 5 corresponds to the shunt element, which is not adjusted.
                total_dmd = sum(bus(in, PD)) + sum(bus(in, 5));  % Including GS (shunt) power
                bus(in, PD) = bus(in, PD) * (1 - shed / total_dmd);  % Adjust demand uniformly
            end
        else
            % If the slack generator has negative generation (demand > generation),
            % we need to reduce generation at all generators uniformly.
            Gind = ismember(gen(:, GEN_BUS), bus(in, BUS_I)) & (gen(:, GEN_STATUS) > 0);
            Gind(slackgen) = 0;  % Exclude the slack generators from generation adjustment
            total_gen = sum(gen(Gind, PG));  % Total generation in the component
            gen(Gind, PG) = gen(Gind, PG) * (1 - abs(slackPG) / total_gen);  % Adjust generation uniformly
        end
    end

    % Update the bus and generator data in the object.
    obj.rmpc.bus = bus;
    obj.rmpc.gen = gen;
end